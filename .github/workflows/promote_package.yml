name: Promote Python Package

on:
  repository_dispatch:
    types: [cloudsmith-package-synchronized]

permissions:
  id-token: write 
  contents: read

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'staging'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: 'example_package'

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      - name: Install Cloudsmith CLI
        uses: cloudsmith-io/cloudsmith-cli-action@v1.0.1
        with:
          oidc-namespace: ${{ env.CLOUDSMITH_NAMESPACE }}
          oidc-service-slug: ${{ env.CLOUDSMITH_SERVICE_SLUG }}
          
      - name: Extract package details from webhook payload
        run: |
          # Extract package information from webhook payload
          echo "Package details from webhook:"
          echo "${{ toJson(github.event.client_payload) }}"
          
          # Extract the package identifier and version
          PACKAGE_IDENTIFIER="${{ github.event.client_payload.package.identifier_perm }}"
          PACKAGE_VERSION="${{ github.event.client_payload.package.version }}"
          
          if [ -z "$PACKAGE_IDENTIFIER" ] || [ "$PACKAGE_IDENTIFIER" = "null" ]; then
            echo "Failed to find package identifier in webhook payload"
            exit 1
          fi
          
          echo "Found package identifier: $PACKAGE_IDENTIFIER"
          echo "Package version: $PACKAGE_VERSION"
          
          # Set as environment variables for later steps
          echo "PACKAGE_IDENTIFIER=$PACKAGE_IDENTIFIER" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Tag package as ready for production
        run: |
          # Tag the package with ready-for-production
          cloudsmith tag add \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/${{ env.PACKAGE_IDENTIFIER }} \
            ready-for-production
          
          echo "Package tagged as ready-for-production"
        shell: bash

      - name: Promote packages tagged with ready-for-production
        run: |
          # Query for packages tagged with ready-for-production
          PACKAGE_QUERY="tags:ready-for-production"
          echo "Searching for packages with query: $PACKAGE_QUERY"
          
          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "$PACKAGE_QUERY" -F json)
          
          # Extract the identifiers using jq
          IDENTIFIERS=$(echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm')
          
          if [ -z "$IDENTIFIERS" ] || [ "$IDENTIFIERS" = "null" ]; then
            echo "No packages found with ready-for-production tag"
            exit 1
          fi
          
          echo "Found packages with ready-for-production tag:"
          echo "$IDENTIFIERS"
          
          # Promote each tagged package
          for IDENTIFIER in $IDENTIFIERS; do
            echo "Promoting package: $IDENTIFIER"
            cloudsmith mv --yes \
              ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
              ${{ env.CLOUDSMITH_PRODUCTION_REPO }}
          done
        shell: bash